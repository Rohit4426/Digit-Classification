{"version":3,"sources":["component/Canvas.js","App.js","index.js"],"names":["Canvas","props","canvasRef","useRef","contextRef","useState","isDrawing","setIsDrawing","setMyImage","useEffect","canvas","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","className","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","myImageURL","toDataURL","getImage","onMouseMove","lineTo","stroke","ref","Button","variant","color","onClick","clearRect","clearResult","App","url","model","setModel","predictionResult","setResult","a","tf","console","log","then","loadModel","preprocessImage","image","tensor","fromPixels","resizeNearestNeighbor","mean","expandDims","toFloat","div","predict","data","predictions","results","Array","from","classes","makeStyles","theme","root","backgroundColor","useStyles","AppBar","position","Toolbar","Typography","component","labels","datasets","label","borderColor","borderWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd87f245.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Canvas = (props) => {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [myImage, setMyImage] = useState(\"\");\n\n  //   var myImage;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 380;\n    canvas.height = 380;\n    canvas.style.width = `${380}px`;\n    canvas.style.height = `${380}px`;\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(1, 1);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"white\";\n    context.lineWidth = 15;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    const canvas = canvasRef.current;\n    const myImageURL = canvas.toDataURL(\"image/png\");\n    setMyImage(myImageURL);\n    setIsDrawing(false);\n    props.getImage(canvas);\n  };\n\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    setMyImage(\"\");\n    props.clearResult();\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"draw-area\">\n        <canvas\n          onMouseDown={startDrawing}\n          onMouseUp={finishDrawing}\n          onMouseMove={draw}\n          ref={canvasRef}\n        ></canvas>\n      </div>\n\n      <p className=\"draw-area-text\">Drawing Area</p>\n\n      <div className=\"clear-button-container\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className=\"clear-button\"\n          onClick={clearCanvas}\n        >\n          Clear\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Canvas;\n","import { useState, useEffect } from \"react\";\nimport Canvas from \"./component/Canvas\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { HorizontalBar } from \"react-chartjs-2\";\n\nfunction App() {\n  const url = {\n    model: \"http://localhost:8080/model.json\",\n  };\n\n  const [model, setModel] = useState();\n  const [predictionResult, setResult] = useState([]);\n  useEffect(() => {\n    tf.ready().then(() => {\n      loadModel(url);\n    });\n  }, []);\n\n  async function loadModel(url) {\n    try {\n      const model = await tf.loadLayersModel(url.model);\n      setModel(model);\n      console.log(\"Model Load success\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const preprocessImage = async (image) => {\n    let tensor = tf.browser\n      .fromPixels(image)\n      .resizeNearestNeighbor([28, 28])\n      .mean(2)\n      .expandDims(2)\n      .expandDims()\n      .toFloat();\n\n    tensor.div(255);\n    console.log(tensor);\n    let predictions = await model.predict(tensor).data();\n\n    let results = Array.from(predictions);\n    console.log(results);\n    setResult(results);\n  };\n\n  const clearResultState = () => {\n    setResult([]);\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      backgroundColor: \"#30312F\",\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\" className={classes.root}>\n        <Toolbar>\n          <Typography component={\"span\"}>\n            <h2>Digit Recognizer</h2>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div className=\"app-child\">\n        <div>\n          <Canvas getImage={preprocessImage} clearResult={clearResultState} />\n        </div>\n        <div className=\"chart-container\">\n          <HorizontalBar\n            data={{\n              labels: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n              datasets: [\n                {\n                  label: \"Prediction probability\",\n                  data: predictionResult,\n                  backgroundColor: [\n                    \"rgba(255, 99, 132, 0.5)\",\n                    \"rgba(54, 162, 235, 0.5)\",\n                    \"rgba(255, 206, 86, 0.5)\",\n                    \"rgba(75, 192, 192, 0.5)\",\n                    \"rgba(153, 102, 255, 0.5)\",\n                    \"rgba(255, 159, 64, 0.5)\",\n                    \"rgba(66, 245, 164, 0.5)\",\n                    \"rgba(132, 255, 82, 0.5)\",\n                    \"rgba(255, 20, 146, 0.5)\",\n                    \"rgba(255, 126, 20, 0.5)\",\n                  ],\n                  borderColor: [\n                    \"rgba(255, 99, 132, 1)\",\n                    \"rgba(54, 162, 235, 1)\",\n                    \"rgba(255, 206, 86, 1)\",\n                    \"rgba(75, 192, 192, 1)\",\n                    \"rgba(153, 102, 255, 1)\",\n                    \"rgba(255, 159, 64, 1)\",\n                    \"rgba(66, 245, 164, 1)\",\n                    \"rgba(132, 255, 82, 1)\",\n                    \"rgba(255, 20, 146, 1)\",\n                    \"rgba(255, 126, 20, 1)\",\n                  ],\n                  borderWidth: 1,\n                },\n              ],\n            }}\n            height={380}\n            width={760}\n          />\n        </div>\n      </div>\n      <p className=\"Footer\">Made with ⚛️ </p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}